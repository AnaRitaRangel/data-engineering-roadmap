{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo a nossa documenta\u00e7\u00e3o /o/","text":""},{"location":"#nosso-fluxo-de-aula","title":"Nosso fluxo de aula","text":"<ul> <li>Vamos criar um novo projeto</li> <li>Vamos definir nossa vers\u00e3o do Python</li> <li>Vamos instalar nossa biblioteca de automa\u00e7\u00e3o</li> <li>Vamos instalar nossa biblioteca de documenta\u00e7\u00e3o</li> <li>Vamos instalar nossa biblioteca de testes</li> </ul>"},{"location":"app/","title":"App","text":""},{"location":"app/#modulo-apppy","title":"M\u00f3dulo <code>app.py</code>","text":"<p>Fun\u00e7\u00e3o <code>main</code></p> <p>Fun\u00e7\u00e3o principal para executar a aplica\u00e7\u00e3o de valida\u00e7\u00e3o de arquivos Excel.</p> <p>Esta fun\u00e7\u00e3o cria uma interface de usu\u00e1rio (UI), permite que o usu\u00e1rio selecione um modelo de dados e fa\u00e7a o upload de um arquivo Excel. O arquivo \u00e9 ent\u00e3o processado e os resultados s\u00e3o exibidos na UI.</p> Source code in <code>src/app.py</code> <pre><code>def main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal para executar a aplica\u00e7\u00e3o de valida\u00e7\u00e3o de arquivos Excel.\n\n    Esta fun\u00e7\u00e3o cria uma interface de usu\u00e1rio (UI), permite que o usu\u00e1rio selecione\n    um modelo de dados e fa\u00e7a o upload de um arquivo Excel. O arquivo \u00e9 ent\u00e3o processado\n    e os resultados s\u00e3o exibidos na UI.\n    \"\"\"\n    ui = ExcelValidatorUI()\n    ui.display_header()\n\n    model_choice = ui.select_model()\n    uploaded_file = ui.upload_file()\n\n    if uploaded_file is not None:\n        result, error = process_excel(uploaded_file, model_choice)\n        ui.display_results(result, error)\n</code></pre>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#modulo-backendpy","title":"M\u00f3dulo <code>backend.py</code>","text":"<p>Fun\u00e7\u00e3o <code>process_excel</code></p> <p>Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <p>Um arquivo Excel carregado pelo usu\u00e1rio.</p> required <code>model_name</code> <p>Nome do modelo de dados a ser usado para valida\u00e7\u00e3o.</p> required <p>Returns:</p> Type Description <p>Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o</p> <p>foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.</p> Source code in <code>src/backend.py</code> <pre><code>def process_excel(uploaded_file, model_name):\n    \"\"\"\n    Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico.\n\n    Args:\n        uploaded_file: Um arquivo Excel carregado pelo usu\u00e1rio.\n        model_name: Nome do modelo de dados a ser usado para valida\u00e7\u00e3o.\n\n    Returns:\n        Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o\n        foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.\n    \"\"\"    \n    try:\n        df = pd.read_excel(uploaded_file)\n\n        # Escolher o schema correto com base em model_name\n        if model_name == \"Usuario\":\n            schema = UsuarioSchema\n        elif model_name == \"Vendas\":\n            schema = VendasSchema\n        elif model_name == \"Recursos Humanos\":\n            schema = RecursosHumanosSchema\n        else:\n            raise ValueError(f\"Modelo desconhecido: {model_name}\")\n\n        # Verificar se h\u00e1 colunas extras no DataFrame\n        extra_cols = set(df.columns) - set(schema.model_fields.keys())\n        if extra_cols:\n            return False, f\"Colunas extras detectadas no Excel: {', '.join(extra_cols)}\"\n\n        # Validar cada linha com o schema escolhido\n        for index, row in df.iterrows():\n            try:\n                _ = schema(**row.to_dict())\n            except Exception as e:\n                raise ValueError(f\"Erro na linha {index + 2}: {e}\")\n\n        return True, None\n\n    except ValueError as ve:\n        return False, str(ve)\n    except Exception as e:\n        return False, f\"Erro inesperado: {str(e)}\"\n</code></pre>"},{"location":"contratos/","title":"Contratos","text":""},{"location":"contratos/#modulo-contratopy","title":"M\u00f3dulo <code>contrato.py</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Define o esquema para os dados do usu\u00e1rio.</p> <p>Attributes:</p> Name Type Description <code>nome</code> <code>str</code> <p>Nome do usu\u00e1rio.</p> <code>idade</code> <code>int</code> <p>Idade do usu\u00e1rio.</p> <code>email</code> <code>str</code> <p>Email do usu\u00e1rio.</p> Source code in <code>src/contrato.py</code> <pre><code>class UsuarioSchema(BaseModel):\n    \"\"\"\n    Define o esquema para os dados do usu\u00e1rio.\n\n    Attributes:\n        nome (str): Nome do usu\u00e1rio.\n        idade (int): Idade do usu\u00e1rio.\n        email (str): Email do usu\u00e1rio.\n    \"\"\"\n    nome: str\n    idade: int\n    email: str\n</code></pre> <p>             Bases: <code>BaseModel</code></p> <p>Define o esquema para os dados de vendas.</p> <p>Attributes:</p> Name Type Description <code>produto</code> <code>str</code> <p>Nome do produto.</p> <code>quantidade</code> <code>int</code> <p>Quantidade vendida.</p> <code>preco</code> <code>float</code> <p>Pre\u00e7o do produto.</p> <code>email</code> <code>EmailStr</code> <p>Email de contato para a venda.</p> Source code in <code>src/contrato.py</code> <pre><code>class VendasSchema(BaseModel):\n    \"\"\"\n    Define o esquema para os dados de vendas.\n\n    Attributes:\n        produto (str): Nome do produto.\n        quantidade (int): Quantidade vendida.\n        preco (float): Pre\u00e7o do produto.\n        email (EmailStr): Email de contato para a venda.\n    \"\"\"\n    produto: str\n    quantidade: int\n    preco: float\n    email: EmailStr\n</code></pre> <p>             Bases: <code>BaseModel</code></p> <p>Define o esquema para os dados de recursos humanos.</p> <p>Attributes:</p> Name Type Description <code>funcionario</code> <code>str</code> <p>Nome do funcion\u00e1rio.</p> <code>departamento</code> <code>str</code> <p>Departamento do funcion\u00e1rio.</p> <code>salario</code> <code>float</code> <p>Sal\u00e1rio do funcion\u00e1rio.</p> Source code in <code>src/contrato.py</code> <pre><code>class RecursosHumanosSchema(BaseModel):\n    \"\"\"\n    Define o esquema para os dados de recursos humanos.\n\n    Attributes:\n        funcionario (str): Nome do funcion\u00e1rio.\n        departamento (str): Departamento do funcion\u00e1rio.\n        salario (float): Sal\u00e1rio do funcion\u00e1rio.\n    \"\"\"\n    funcionario: str\n    departamento: str\n    salario: float\n</code></pre>"},{"location":"frontend/","title":"Frontend","text":""},{"location":"frontend/#modulo-frontendpy","title":"M\u00f3dulo frontend.py","text":"<p>Classe respons\u00e1vel por gerar a interface de usu\u00e1rio para o validador de arquivos Excel.</p>"},{"location":"frontend/#src.frontend.ExcelValidatorUI.set_page_config","title":"<code>set_page_config()</code>","text":""}]}