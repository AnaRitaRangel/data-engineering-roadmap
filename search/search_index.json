{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fluxo do Workshop","text":"<p>Fique calmo, tudo vai dar certo.</p> <p></p> <p>Tem tudo em detalhes aqui no Data Project Starter Kit</p>"},{"location":"#1-configuracao-inicial","title":"1) Configura\u00e7\u00e3o inicial","text":""},{"location":"#1-vamos-criar-um-novo-projeto-no-git-e-github","title":"1) Vamos criar um novo projeto no Git e Github","text":"<ul> <li>Acessar site Github e criar nossa pasta</li> <li>Fazendo um teste simples para ver se tudo est\u00e1 bem</li> <li>Criando um README</li> </ul> <pre><code>touch README.md\n</code></pre> <ul> <li>Salvando ele</li> </ul> <pre><code>git add .\ngit commit -m \"docs: adicionando arquivo README\"\ngit push --set-upstream origin main\n</code></pre> <ul> <li>Deletando ele</li> </ul> <pre><code>git add .\ngit commit -m \"docs: remover arquivo README\"\ngit push\n</code></pre> <ul> <li>Recuperando ele</li> </ul> <pre><code>git log\ngit checkout 3eab9123874b4ec51b0ab6d103a9483f2250c23f -- README.md\ngit add .\ngit push\n</code></pre>"},{"location":"#2-vamos-definir-nossa-versao-do-python-usando-o-pyenv","title":"2) Vamos definir nossa vers\u00e3o do Python usando o Pyenv","text":"<pre><code>python --versions\npyenv versions\npyenv local 3.11.5\n</code></pre>"},{"location":"#3-vamos-criar-nosso-ambiente-virtual","title":"3) Vamos criar nosso ambiente virtual","text":"<p>Para criar o ambiente virtual, abra o terminal dentro da pasta criada e fa\u00e7a:</p> <pre><code>python -m venv nome_do_ambiente_virtual \n# O padrao \u00e9 utilizar .venv\nsource nome_do_ambiente_virtual/bin/activate\n# Usu\u00e1rios Linux e mac\nnome_do_ambiente_virtual\\Scripts\\Activate\n# Usu\u00e1rios Windows\n</code></pre>"},{"location":"#4-instalando-uma-biblioteca","title":"4) Instalando uma biblioteca","text":"<pre><code>pip install selenium\n</code></pre>"},{"location":"#4-replicando-ambientes","title":"4) Replicando ambientes","text":"<p>Agora, se quisermos rodar o nosso projeto em outra m\u00e1quina, n\u00e3o ser\u00e1 necess\u00e1rio baixar as depend\u00eancias uma a uma, basta fazer:</p> <pre><code>pip freeze &gt; requirements.txt\npip install -r requirements.txt  \n</code></pre>"},{"location":"#5-desativando-o-ambiente-virtual","title":"5) Desativando o ambiente virtual","text":"<p>E por fim, para desativar o ambiente virtual:</p> <pre><code>deactive\n</code></pre>"},{"location":"#6-criando-o-gitignore","title":"6) Criando o .gitignore","text":"<pre><code>touch .gitignore\n</code></pre> <p>Site com exemplo de arquivo</p>"},{"location":"#7-melhorando-nosso-readme","title":"7) Melhorando nosso README","text":"<pre><code>\n    ### Instala\u00e7\u00e3o e Configura\u00e7\u00e3o\n\n    1. Clone o reposit\u00f3rio:\n\n    ```bash\n    git clone https://github.com/lvgalvao/dataprojectstarterkit.git\n    cd dataprojectstarterkit\n    ```\n\n    2. Configure a vers\u00e3o correta do Python com `pyenv`:\n\n    ```bash\n    pyenv install 3.11.5\n    pyenv local 3.11.5\n    ```\n\n    3. Instale as depend\u00eancias do projeto:\n\n    ```bash\n    python -m venv .venv\n    # O padrao \u00e9 utilizar .venv\n    source .venv/bin/activate\n    # Usu\u00e1rios Linux e mac\n    .venv\\Scripts\\Activate\n    # Usu\u00e1rios Windows\n    pip install -r requirements.txt  \n    ```\n</code></pre>"},{"location":"#2-precisamos-falar-de-testes","title":"2) Precisamos falar de testes","text":"<p>Diferen\u00e7a entre fases de teste, tipos de teste e formas de execu\u00e7\u00e3o. Hoje em dia h\u00e1 muita confus\u00e3o quando se fala em fases de teste, tipos de teste e formas de execu\u00e7\u00e3o. </p> <p>Se voc\u00ea, assim como eu, j\u00e1 ouviu as frases a seguir v\u00e1rias vezes, ent\u00e3o esse artigo \u00e9 para voc\u00ea!</p> <ul> <li>\u201cFulano sabe teste funcional e n\u00e3o automatizado\u201d;</li> <li>\u201cdesenvolva o teste unit\u00e1rio antes dos funcionais\u201d; </li> <li>\u201cprecisamos que os testes sejam 100% automatizados\u201d; </li> <li>\u201ccad\u00ea a massa de dados para os testes de contrato?\u201d</li> </ul>"},{"location":"#piramide-de-teste","title":"Pir\u00e2mide de teste","text":"<p>Uma maneira mais visual de exemplificar um pouco sobre as fases de teste e os tipos de teste que cada fase contempla, \u00e9 a pir\u00e2mide de automa\u00e7\u00e3o de teste.</p> <p></p>"},{"location":"#1-criando-nosso-primeiro-teste","title":"1) Criando nosso primeiro teste","text":"<pre><code>pip install pytest\npip install selenium\n</code></pre> <p>Como instalar o webdriver</p> <p></p> <p>Vamos criar nosso arquivo de teste</p> <pre><code>mkdir tests\ncd tests\ntouch test_app.py\n</code></pre> <p>arquivo <code>test_app.py</code></p> <pre><code>from selenium import webdriver\nfrom selenium.common.exceptions import TimeoutException\nfrom time import sleep\n\n# Precismaos definir qual driver vamos utilizar\ndriver = webdriver.Firefox()\n\n# Define um timeout impl\u00edcito\ndriver.set_page_load_timeout(5)  # 5 segundos\n\n# Vamos fazer uma tratativa de try-except de entrar na nossa p\u00e1gina\ntry:\n    driver.get(\"http://localhost:8501\")\n    sleep(5)\n    print(\"Acessou a p\u00e1gina com sucesso\")\nexcept TimeoutException:\n    print(\"Tempo de carregamento da p\u00e1gina excedeu o limite.\")\nfinally:\n    driver.quit()\n</code></pre> <p>Agora que j\u00e1 temos nosso teste vamos desenvolver nosso primeiro c\u00f3digo</p> <p>Para isso vamos trabalhar com o streamlit</p> <p></p> <p>Instalando o streamlit</p> <pre><code>pip install streamlit\n</code></pre> <p>Vamos fazer o nosso Hello World</p> <pre><code>mkdir src\ncd src\ntouch app.py\n</code></pre> <p>arquivo <code>app.py</code></p> <pre><code>import streamlit as st\n\n# T\u00edtulo do App\nst.title('Nosso Primeiro App com Streamlit')\n\n# Escrevendo um Hello World com markdown\nst.markdown('**Hello world!** \ud83c\udf0d')\n\n# Escrevendo texto\nst.write('Esta \u00e9 uma demonstra\u00e7\u00e3o de algumas funcionalidades do Streamlit.')\n\n# Input de texto do usu\u00e1rio\ninput_texto = st.text_input('Digite algo aqui:')\n\n# Mostrando o texto digitado\nst.write(f'Voc\u00ea digitou: {input_texto}')\n\n# Slider para n\u00fameros\nnumero = st.slider('Escolha um n\u00famero', 0, 100, 50)\n\n# Exibir o n\u00famero escolhido\nst.write(f'Voc\u00ea escolheu o n\u00famero: {numero}')\n\n# Gr\u00e1fico de barras simples\nimport pandas as pd\nimport numpy as np\n\n# Criando dados aleat\u00f3rios\ndados = pd.DataFrame({\n  'colunas': ['A', 'B', 'C', 'D', 'E'],\n  'valores': np.random.randn(5)\n})\n</code></pre>"},{"location":"#temos-nosso-frontend-o","title":"Temos nosso frontend /o/","text":""},{"location":"#agora-vamos-para-uma-tangente","title":"Agora vamos para uma tangente","text":"<p>Temos um problema com nosso processo que muda de porta</p> <p>Sempre que subimos uma nova aplica\u00e7\u00e3o ele est\u00e1 usando uma outra porta</p> <p>Precisamos \"matar\" esse processo e reutilizar a porta 8501</p> <p>Usamos o comando lsof (List Open Files) para verificar os processos que est\u00e3o conectados nessa porta</p> <pre><code>lsof -i :8501\n</code></pre> <p>Depois usamos o comando kill para matar esse processo</p> <pre><code>kill -9 [PID]\n</code></pre> <p>Podemos simplificar usando somente uma linha</p> <pre><code>lsof -ti :8501 | xargs kill -9\n</code></pre> <p>No Windows, o comando <code>lsof</code> (List Open Files), que \u00e9 comum em sistemas baseados em Unix como Linux e macOS, n\u00e3o est\u00e1 dispon\u00edvel. No entanto, voc\u00ea pode realizar uma tarefa similar para verificar quais processos est\u00e3o usando uma porta espec\u00edfica (por exemplo, a porta 8501) usando o Resource Monitor ou comandos no Prompt de Comando. Aqui est\u00e3o duas maneiras de fazer isso:</p>"},{"location":"#1-usando-o-resource-monitor","title":"1. Usando o Resource Monitor","text":"<ol> <li>Pressione <code>Ctrl + Shift + Esc</code> para abrir o Gerenciador de Tarefas.</li> <li>V\u00e1 para a aba \"Desempenho\" e clique em \"Monitor de Recursos\" na parte inferior.</li> <li>No Resource Monitor, v\u00e1 para a aba \"Rede\".</li> <li>Olhe na se\u00e7\u00e3o \"Portas de Escuta\" para encontrar a porta 8505 e veja quais processos est\u00e3o associados a ela.</li> </ol>"},{"location":"#2-usando-o-prompt-de-comando","title":"2. Usando o Prompt de Comando","text":"<ol> <li> <p>Abra o Prompt de Comando como administrador (isso \u00e9 necess\u00e1rio para executar comandos que acessam informa\u00e7\u00f5es de rede).</p> </li> <li> <p>Digite o seguinte comando:</p> <p><code>cmd netstat -ano | findstr :8501</code></p> <p>Esse comando lista todas as conex\u00f5es e portas de escuta (<code>netstat -ano</code>) e filtra os resultados para mostrar apenas as entradas relacionadas \u00e0 porta 8505 (<code>findstr :8501</code>).</p> </li> <li> <p>Voc\u00ea ver\u00e1 uma lista de entradas, se houver alguma, mostrando o protocolo, endere\u00e7o local, endere\u00e7o estrangeiro, estado, e o PID (ID do Processo) associado \u00e0 porta 8505.</p> </li> <li> <p>Se voc\u00ea quiser saber qual aplicativo est\u00e1 associado a um PID espec\u00edfico, voc\u00ea pode encontrar este PID na aba \"Detalhes\" do Gerenciador de Tarefas. Para finalizar um processo em uma linha de comando no Windows, combinando a busca do processo pela porta e o encerramento do processo, voc\u00ea pode usar o PowerShell. O PowerShell \u00e9 mais poderoso e flex\u00edvel do que o Prompt de Comando tradicional para este tipo de opera\u00e7\u00e3o. Aqui est\u00e1 como voc\u00ea pode fazer isso:</p> </li> </ol> <p>Abra o PowerShell como administrador e execute o seguinte comando:</p> <pre><code>Get-NetTCPConnection -LocalPort 8501 | Select-Object -ExpandProperty OwningProcess | ForEach-Object {Stop-Process -Id $_ -Force}\n</code></pre> <p>Este comando faz o seguinte:</p> <ol> <li> <p><code>Get-NetTCPConnection -LocalPort 8501</code>: Obt\u00e9m todas as conex\u00f5es TCP que est\u00e3o escutando na porta 8501.</p> </li> <li> <p><code>Select-Object -ExpandProperty OwningProcess</code>: Seleciona os IDs dos processos (PID) que est\u00e3o escutando naquela porta.</p> </li> <li> <p><code>ForEach-Object {Stop-Process -Id $_ -Force}</code>: Para cada PID encontrado, usa o <code>Stop-Process</code> para encerrar o processo. A op\u00e7\u00e3o <code>-Force</code> \u00e9 usada para garantir que o processo seja encerrado.</p> </li> </ol>"},{"location":"#taskipy-para-nao-ficar-toda-essa-quantidade-de-codigo-vamos-usar-o-taskipy","title":"Taskipy - Para n\u00e3o ficar toda essa quantidade de c\u00f3digo, vamos usar o Taskipy","text":"<p>Basicamente o Taskipy \u00e9 um short de comandos</p> <p>Vamos instalar ele com o comando</p> <pre><code>pip install taskipy\n</code></pre> <p>Criar um arquivo de configura\u00e7\u00e3o</p> <pre><code>touch pyproject.toml\n</code></pre> <p>E dentro desse arquivo <code>pyproject.toml</code> incluir os comandos que queremos</p> <pre><code>[tool.taskipy.tasks]\nrun = \"lsof -ti :8501 | xargs kill -9 | streamlit run src/app.py\"\n</code></pre> <p>Agora conseguimos simplificar e tornar nosso processo de rodar nossa aplica\u00e7\u00e3o mais r\u00e1pido</p>"},{"location":"#saindo-da-tangente","title":"Saindo da tangente","text":"<pre><code>python tests/test_app.py\n</code></pre> <p>E temos o nosso primeiro teste passando!</p> <p>Agora temos duas op\u00e7\u00f5es.</p>"},{"location":"#escrever-um-novo-teste-ou-refatorar","title":"Escrever um novo teste ou refatorar.","text":""},{"location":"#3-nossa-primeira-refatoracao","title":"3) Nossa primeira refatora\u00e7\u00e3o","text":"<p>Vamos melhorar os nossos testes usando o pytest</p> <p>1) Vamos criar uma fun\u00e7\u00e3o que inicia o nosso driver</p> <p>2) Vamos criar uma fun\u00e7\u00e3o que testa se o site est\u00e1 online</p> <p>Para nossa fun\u00e7\u00e3o vamos usar o m\u00f3dulo fixture do pytest</p> <pre><code>import pytest\nimport subprocess\nfrom selenium import webdriver\n\n@pytest.fixture\ndef driver():\n    # Iniciar o Streamlit em background\n    process = subprocess.Popen([\"streamlit\", \"run\", \"src/app.py\"])\n\n    # Iniciar o WebDriver usando GeckoDriver\n    driver = webdriver.Firefox()\n    driver.set_page_load_timeout(5)\n    yield driver\n\n    # Fechar o WebDriver e o Streamlit ap\u00f3s o teste\n    driver.quit()\n    process.kill()\n\ndef test_app_opens(driver):\n    # Verificar se a p\u00e1gina abre\n    driver.get(\"http://localhost:8501\")\n</code></pre> <p>Al\u00e9m disso, Podemos incluir um comando novo no task</p> <pre><code>test = \"lsof -ti :8501 | xargs kill -9 | pytest tests -v\"\n</code></pre>"},{"location":"#nosso-segundo-teste","title":"Nosso segundo teste","text":"<p>Vamos escrever um teste que cheque se o title ta p\u00e1gina \u00e9 <code>validador de schema excel</code></p> <p>Para isso vamos criar mais um teste</p> <pre><code>def test_check_title_is(driver):\n    # Verificar se a p\u00e1gina abre\n    driver.get(\"http://localhost:8501\")\n    # Verifica se o titulo de p\u00e1gina \u00e9\n    sleep(5)\n    # Capturar o t\u00edtulo da p\u00e1gina\n    page_title = driver.title\n\n    # Verificar se o t\u00edtulo da p\u00e1gina \u00e9 o esperado\n    expected_title = \"Validador de schema excel\"  # Substitua com o t\u00edtulo real esperado\n    assert page_title == expected_title, f\"O t\u00edtulo da p\u00e1gina era '{page_title}', mas esperava-se '{expected_title}'\"\n</code></pre> <p>Vamos revisitar nossa aplica\u00e7\u00e3o tamb\u00e9m</p> <pre><code>import streamlit as st\n\n# T\u00edtulo do App\nst.title('Validador de schema excel')\n</code></pre> <p>Nosso teste n\u00e3o passa =(</p> <p>O motivo? </p> <p>O streamlit e o selenium chamam coisas diferentes com o mesmo nome!</p> <pre><code>import streamlit as st\n\nst.set_page_config(\n    page_title=\"Validador de schema excel\"\n)\n</code></pre>"},{"location":"#3-terceira-feature","title":"3) Terceira Feature","text":""},{"location":"#adicionar-um-texto-no-h1","title":"Adicionar um texto no h1","text":"<p>test_app.py</p> <pre><code>from selenium.webdriver.common.by import By\n\ndef test_check_streamlit_h1(driver):\n    # Acessar a p\u00e1gina do Streamlit\n    driver.get(\"http://localhost:8501\")\n\n    # Aguardar para garantir que a p\u00e1gina foi carregada\n    sleep(5)  # Espera 5 segundos\n\n    # Capturar o primeiro elemento &lt;h1&gt; da p\u00e1gina\n    h1_element = driver.find_element(By.TAG_NAME, \"h1\")\n\n    # Verificar se o texto do elemento &lt;h1&gt; \u00e9 o esperado\n    expected_text = \"Insira o seu excel para valida\u00e7\u00e3o\"\n    assert h1_element.text == expected_text\n\n</code></pre> <p>app.py</p> <pre><code>st.title(\"Insira o seu excel para valida\u00e7\u00e3o\")\n</code></pre>"},{"location":"#4-agora-vamos-criar-um-teste-que-o-usuario-pode-inserir-um-excel-e-vai-aparecer-uma-mensagem-de-sucesso","title":"4) Agora vamos criar um teste que o usu\u00e1rio pode inserir um excel, e vai aparecer uma mensagem de sucesso","text":"<p>Vamos criar nossa nova fun\u00e7\u00e3o</p> <p>test_app.py</p> <pre><code>def test_check_usuario_pode_inserir_um_excel_e_receber_uma_mensagem(driver):\n    # Acessar a p\u00e1gina do Streamlit\n    driver.get(\"http://localhost:8501\")\n\n    # Aguardar para garantir que a p\u00e1gina foi carregada\n    sleep(5)  # Espera 5 segundos\n\n    # Realizar o upload do arquivo de sucesso\n    success_file_path = os.path.abspath(\"data/arquivo_excel.xlsx\")\n    driver.find_element(By.CSS_SELECTOR, 'input[type=\"file\"]').send_keys(success_file_path)\n\n    # Aguardar a mensagem de sucesso\n    sleep(5)\n    assert \"O schema do arquivo Excel est\u00e1 correto!\" in driver.page_source\n</code></pre> <p>app.py</p> <pre><code>arquivo = st.file_uploader(\"Carregue seu arquivo Excel aqui\", type=[\"xlsx\"])\n\nif arquivo:\n    st.success(\"O schema do arquivo Excel est\u00e1 correto!\")\n</code></pre> <p>Agora vamos parar com nosso frontend e ir para a parte do backend</p>"},{"location":"#pydantic","title":"Pydantic","text":"<p>Vamos instalar o Pydantic</p> <pre><code>pip install \"pydantic[email]\" openpyxl\n</code></pre> <p>Criar um arquivo de estes unit\u00e1rios <code>test_unit.py</code></p> <pre><code>import pytest\nfrom datetime import datetime\nfrom src.contrato import Vendas, CategoriaEnum\nfrom pydantic import ValidationError\n\n# Testes com dados v\u00e1lidos\ndef test_vendas_com_dados_validos():\n    dados_validos = {\n        \"email\": \"comprador@example.com\",\n        \"data\": datetime.now(),\n        \"valor\": 100.50,\n        \"produto\": \"Produto X\",\n        \"quantidade\": 3,\n        \"categoria\": \"categoria3\",\n    }\n\n    # A sintaxe **dados_validos \u00e9 uma forma de desempacotamento de dicion\u00e1rios em Python. \n    # O que isso faz \u00e9 passar os pares chave-valor no dicion\u00e1rio dados_validos como argumentos nomeados para o construtor da classe Vendas.\n\n    venda = Vendas(**dados_validos)\n\n    assert venda.email == dados_validos[\"email\"]\n    assert venda.data == dados_validos[\"data\"]\n    assert venda.valor == dados_validos[\"valor\"]\n    assert venda.produto == dados_validos[\"produto\"]\n    assert venda.quantidade == dados_validos[\"quantidade\"]\n    assert venda.categoria == dados_validos[\"categoria\"]\n\n# Testes com dados inv\u00e1lidos\ndef test_vendas_com_dados_invalidos():\n    dados_invalidos = {\n        \"email\": \"comprador\",\n        \"data\": \"n\u00e3o \u00e9 uma data\",\n        \"valor\": -100,\n        \"produto\": \"\",\n        \"quantidade\": -1,\n        \"categoria\": \"categoria3\"\n    }\n\n    with pytest.raises(ValidationError):\n        Vendas(**dados_invalidos)\n\n# Teste de valida\u00e7\u00e3o de categoria\ndef test_validacao_categoria():\n    dados = {\n        \"email\": \"comprador@example.com\",\n        \"data\": datetime.now(),\n        \"valor\": 100.50,\n        \"produto\": \"Produto Y\",\n        \"quantidade\": 1,\n        \"categoria\": \"categoria inexistente\",\n    }\n\n    with pytest.raises(ValidationError):\n        Vendas(**dados)\n</code></pre> <p>Criar nosso arquivo de contrato <code>contrato.py</code></p> <pre><code>from pydantic import BaseModel, EmailStr, PositiveFloat, PositiveInt, validator\nfrom datetime import datetime\nfrom enum import Enum\n\nclass CategoriaEnum(str, Enum):\n    categoria1 = \"categoria1\"\n    categoria2 = \"categoria2\"\n    categoria3 = \"categoria3\"\n\n\nclass Vendas(BaseModel):\n\n    \"\"\"\n    Modelo de dados para as vendas.\n\n    Args:\n        email (str): email do comprador\n        data (datetime): data da compra\n        valor (int): valor da compra\n        produto (str): nome do produto\n        quantidade (int): quantidade de produtos\n        categoria (str): categoria do produto\n\n    \"\"\"\n    email: EmailStr\n    data: datetime\n    valor: PositiveFloat\n    quantidade: PositiveInt\n    categoria: CategoriaEnum\n\n    @validator('categoria')\n    def categoria_deve_estar_no_enum(cls, error):\n        return errore\n</code></pre>"},{"location":"#nossos-testes-ja-passam-o","title":"Nossos testes j\u00e1 passam /o/","text":""},{"location":"#vamos-refatorar-nossa-aplicacao","title":"Vamos refatorar nossa aplica\u00e7\u00e3o","text":"<p>Vamos segregar a l\u00f3gica do frontend (streamlit)</p> <p>Do app.py</p> <p>Vamos sair disso</p> <pre><code>import streamlit as st\n\nst.set_page_config(\n    page_title=\"Validador de schema excel\"\n)\n\nst.title(\"Insira o seu excel para valida\u00e7\u00e3o\")\n\narquivo = st.file_uploader(\"Carregue seu arquivo Excel aqui\", type=[\"xlsx\"])\n\nif arquivo:\n    st.success(\"O schema do arquivo Excel est\u00e1 correto!\")\n</code></pre> <p>para isso</p> <pre><code>from frontend import ExcelValidadorUI\nfrom backend import process_excel\n\ndef main():\n    ui = ExcelValidadorUI()\n    ui.display_header()\n\n    upload_file = ui.upload_file()\n\n    if upload_file:\n        result, error = process_excel(upload_file)\n        ui.display_results(result, error)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"#vamos-criar-nosso-backend","title":"Vamos criar nosso backend","text":"<pre><code>import pandas as pd\nfrom contrato import Vendas\n\ndef process_excel(uploaded_file):\n    try:\n        df = pd.read_excel(uploaded_file)\n\n        # Verificar se h\u00e1 colunas extras no DataFrame\n        extra_cols = set(df.columns) - set(Vendas.model_fields.keys())\n        if extra_cols:\n            return False, f\"Colunas extras detectadas no Excel: {', '.join(extra_cols)}\"\n\n        # Validar cada linha com o schema escolhido\n        for index, row in df.iterrows():\n            try:\n                _ = Vendas(**row.to_dict())\n            except Exception as e:\n                raise ValueError(f\"Erro na linha {index + 2}: {e}\")\n\n        return True, None\n\n    except ValueError as ve:\n        return False, str(ve)\n    except Exception as e:\n        return False, f\"Erro inesperado: {str(e)}\"\n</code></pre>"},{"location":"#vamos-para-o-noss-ultimo-teste","title":"Vamos para o noss \u00faltimo teste!","text":"<p>Arquivo <code>test_app.py</code></p> <pre><code>def test_failed_upload(driver):\n    driver.get(\"http://localhost:8501\")\n\n    # Aguardar um tempo para a aplica\u00e7\u00e3o carregar\n    sleep(5)\n\n    # Realizar o upload do arquivo de falha\n    failure_file_path = os.path.abspath(\"data/failure.xlsx\")\n    driver.find_element(By.CSS_SELECTOR, 'input[type=\"file\"]').send_keys(failure_file_path)\n\n    # Aguardar a mensagem de erro\n    sleep(5)\n    assert \"Erro na valida\u00e7\u00e3o\" in driver.page_source\n</code></pre> <p>Vamos precisar mudar o nosso frontend</p> <pre><code>    def display_results(self):\n        return st.success(\"O schema do arquivo Excel est\u00e1 correto!\")        \n</code></pre> <pre><code>def display_results(self, result, error):\n    if error:\n        st.error(f\"Erro na valida\u00e7\u00e3o: {error}\")\n    else:\n        st.success(\"O schema do arquivo Excel est\u00e1 correto!\")\n</code></pre>"},{"location":"#nossa-documentacao","title":"Nossa documenta\u00e7\u00e3o","text":"<pre><code>bash\npip install mkdocs mkdocstrings\n</code></pre> <p>Vamos inserir nossa documenta\u00e7\u00e3o</p> <p>Vamos revisitar nosso c\u00f3digo e inserir as docstrings</p> <p>backend.py</p> <pre><code>\"\"\"\nProcessa um arquivo Excel, validando-o contra um esquema espec\u00edfico.\nArgs:\n    uploaded_file: Um arquivo Excel carregado pelo usu\u00e1rio.\nReturns:\n    Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o\n    foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.\n\"\"\" \n</code></pre> <p>frontend.py</p> <pre><code>\"\"\"\nClasse respons\u00e1vel por gerar a interface de usu\u00e1rio para o validador de arquivos Excel.\n\"\"\"\n</code></pre> <p>contrato.py</p> <pre><code>\"\"\"\nModelo de dados para as vendas.\nArgs:\n    email (str): email do comprador\n    data (datetime): data da compra\n    valor (int): valor da compra\n    produto (str): nome do produto\n    quantidade (int): quantidade de produtos\n    categoria (str): categoria do produto\n\"\"\"\n</code></pre> <pre><code>pip install mkdocs \"mkdocstrings[python]\" mkdocs-material\n</code></pre> <pre><code>mkdocs new\n</code></pre> <p>mkdocs.yml</p> <pre><code>site_name: \"My Library\"\n\ntheme:\n  name: \"material\"\n\nplugins:\n- search\n- mkdocstrings\n</code></pre> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"app/","title":"App","text":""},{"location":"app/#modulo-apppy","title":"M\u00f3dulo <code>app.py</code>","text":"<p>Fun\u00e7\u00e3o <code>main</code></p> <p>Fun\u00e7\u00e3o principal para executar a aplica\u00e7\u00e3o de valida\u00e7\u00e3o de arquivos Excel.</p> <p>Esta fun\u00e7\u00e3o cria uma interface de usu\u00e1rio (UI), permite que o usu\u00e1rio selecione um modelo de dados e fa\u00e7a o upload de um arquivo Excel. O arquivo \u00e9 ent\u00e3o processado e os resultados s\u00e3o exibidos na UI.</p> Source code in <code>src/app.py</code> <pre><code>def main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal para executar a aplica\u00e7\u00e3o de valida\u00e7\u00e3o de arquivos Excel.\n\n    Esta fun\u00e7\u00e3o cria uma interface de usu\u00e1rio (UI), permite que o usu\u00e1rio selecione\n    um modelo de dados e fa\u00e7a o upload de um arquivo Excel. O arquivo \u00e9 ent\u00e3o processado\n    e os resultados s\u00e3o exibidos na UI.\n    \"\"\"\n    ui = ExcelValidatorUI()\n    ui.display_header()\n\n    model_choice = ui.select_model()\n    uploaded_file = ui.upload_file()\n\n    if uploaded_file is not None:\n        result, error = process_excel(uploaded_file, model_choice)\n        ui.display_results(result, error)\n</code></pre>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#modulo-backendpy","title":"M\u00f3dulo <code>backend.py</code>","text":"<p>Fun\u00e7\u00e3o <code>process_excel</code></p> <p>Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>uploaded_file</code> <p>Um arquivo Excel carregado pelo usu\u00e1rio.</p> required <code>model_name</code> <p>Nome do modelo de dados a ser usado para valida\u00e7\u00e3o.</p> required <p>Returns:</p> Type Description <p>Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o</p> <p>foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.</p> Source code in <code>src/backend.py</code> <pre><code>def process_excel(uploaded_file, model_name):\n    \"\"\"\n    Processa um arquivo Excel, validando-o contra um esquema espec\u00edfico.\n\n    Args:\n        uploaded_file: Um arquivo Excel carregado pelo usu\u00e1rio.\n        model_name: Nome do modelo de dados a ser usado para valida\u00e7\u00e3o.\n\n    Returns:\n        Uma tupla (resultado, erro), onde 'resultado' \u00e9 um booleano indicando se a valida\u00e7\u00e3o\n        foi bem-sucedida e 'erro' \u00e9 uma mensagem de erro se a valida\u00e7\u00e3o falhar.\n    \"\"\"    \n    try:\n        df = pd.read_excel(uploaded_file)\n\n        # Escolher o schema correto com base em model_name\n        if model_name == \"Usuario\":\n            schema = UsuarioSchema\n        elif model_name == \"Vendas\":\n            schema = VendasSchema\n        elif model_name == \"Recursos Humanos\":\n            schema = RecursosHumanosSchema\n        else:\n            raise ValueError(f\"Modelo desconhecido: {model_name}\")\n\n        # Verificar se h\u00e1 colunas extras no DataFrame\n        extra_cols = set(df.columns) - set(schema.model_fields.keys())\n        if extra_cols:\n            return False, f\"Colunas extras detectadas no Excel: {', '.join(extra_cols)}\"\n\n        # Validar cada linha com o schema escolhido\n        for index, row in df.iterrows():\n            try:\n                _ = schema(**row.to_dict())\n            except Exception as e:\n                raise ValueError(f\"Erro na linha {index + 2}: {e}\")\n\n        return True, None\n\n    except ValueError as ve:\n        return False, str(ve)\n    except Exception as e:\n        return False, f\"Erro inesperado: {str(e)}\"\n</code></pre>"},{"location":"frontend/","title":"Frontend","text":""},{"location":"frontend/#modulo-frontendpy","title":"M\u00f3dulo frontend.py","text":"<p>Classe respons\u00e1vel por gerar a interface de usu\u00e1rio para o validador de arquivos Excel.</p>"},{"location":"frontend/#src.frontend.ExcelValidatorUI.set_page_config","title":"<code>set_page_config()</code>","text":""}]}